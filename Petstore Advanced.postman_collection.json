{
	"info": {
		"_postman_id": "9f446ef7-0a0e-4bb1-acea-b1768c529f3d",
		"name": "Petstore Advanced",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24859866"
	},
	"item": [
		{
			"name": "Place an order for a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 500 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});\r",
							"\r",
							"    \r",
							"    // creating const jsonData to shorten code\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Current ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Pet-ID is correct\", function () {\r",
							"    pm.expect(jsonData.petID).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Quantity is correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Status is correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Order is not shipped yet\", function () {\r",
							"    pm.expect(jsonData.complete).to.eql(Boolean(pm.environment.get(\"COMPLETE\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct Keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"petId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
							"    pm.expect(pm.response.text()).to.include(\"shipDate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"complete\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in correct format\", function(){\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.petId).to.be.a('number');\r",
							"    pm.expect(jsonResponse.quantity).to.be.a('number');\r",
							"    pm.expect(jsonResponse.shipDate).to.be.a('string');\r",
							"    pm.expect(jsonResponse.status).to.be.a('string');\r",
							"    pm.expect(jsonResponse.complete).to.be.a('boolean');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear()",
							"",
							"pm.environment.set(\"ID\", Math.floor(Math.random() * 101));",
							"",
							"pm.environment.set(\"PETID\", Math.floor(Math.random() * 101));",
							"",
							"pm.environment.set(\"QTY\", Math.floor(Math.random() * 101));",
							"",
							"pm.environment.set(\"SHIPDATE\", new Date());",
							"",
							"//pm.environment.set(\"status\", \"placed\");",
							"//m.environment.set(\"complete\", \"false\");",
							"",
							"//Date in UTC format",
							"//pm.environment.set(\"shipDate\", newDate().getTime());",
							"",
							"let statusPick = [\"placed\", \"approved\", \"deliered\"];",
							"let randomStatus = statusPick[Math.floor(Math.random() * statusPick.length)];",
							"pm.environment.set(\"STATUS\", randomStatus);",
							"",
							"let completePick = [true, false];",
							"let randomComplete = completePick[Math.floor(Math.random() * completePick.length)];",
							"pm.environment.set(\"COMPLETE\", randomComplete);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{ID}},\r\n    \"petId\": {{PETID}},\r\n    \"quantity\": {{QTY}},\r\n    \"shipDate\": \"{{SHIPDATE}}\",\r\n    \"status\": \"{{STATUS}}\",\r\n    \"complete\": {{COMPLETE}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get specific order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 500 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});\r",
							"\r",
							"    \r",
							"    // creating const jsonData to shorten code\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Current ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Pet-ID is correct\", function () {\r",
							"    pm.expect(jsonData.petID).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Quantity is correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Status is correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Order is not shipped yet\", function () {\r",
							"    pm.expect(jsonData.complete).to.eql(Boolean(pm.environment.get(\"COMPLETE\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Body has correct Keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"petId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
							"    pm.expect(pm.response.text()).to.include(\"shipDate\");\r",
							"    pm.expect(pm.response.text()).to.include(\"status\");\r",
							"    pm.expect(pm.response.text()).to.include(\"complete\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in correct format\", function(){\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.petId).to.be.a('number');\r",
							"    pm.expect(jsonResponse.quantity).to.be.a('number');\r",
							"    pm.expect(jsonResponse.shipDate).to.be.a('string');\r",
							"    pm.expect(jsonResponse.status).to.be.a('string');\r",
							"    pm.expect(jsonResponse.complete).to.be.a('boolean');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// STATUS CHECK TESTS \r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}    \r",
							"\r",
							"// RESPONSE TIME CHECK\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// RESPONSE SIZE CHECK\r",
							"\r",
							"pm.test(\"Response size is less than 1000 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Order has been deleted, OK\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.test(\"Deletion Code is correct\", function(){\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Deletion Type is correct\", function(){\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"});\r",
							"pm.test(\"Deletion MessageID is correct\", function() {\r",
							"    pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Correct order is deleted\", function () {\r",
							"    pm.expect(jsonData.code).to.not.eql(404);\r",
							"    pm.expect(jsonData.code).to.not.eql(400);\r",
							"    pm.expect(jsonData.code).to.not.eql(500);\r",
							"    pm.expect(jsonData.message).to.not.eql(\"Order Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not one of wrong codes\", function () {\r",
							"    pm.expect(pm.response.code).to.not.oneOf([404,400,500]);\r",
							"    })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirmation order deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, check access token or Log in\"] = true;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = true;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = true;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"he instance is not valid\"] = true;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = true;\r",
							"}\r",
							"\r",
							"// RESPONSE TIME CHECK\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// RESPONSE SIZE CHECK\r",
							"\r",
							"pm.test(\"Response size is less than 1000 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// HEADER CHECK\r",
							"pm.test(\"Header's Access-Control-Allow-Origin is correct\", function () {\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"});\r",
							"\r",
							"pm.test(\"Order has been deleted, OK\", function(){\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check specific deleted order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Current ID is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.iterationData.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Pet-ID is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.petId).to.eql(pm.iterationData.get(\"PETID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Quantity is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.iterationData.get(\"QT\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Status is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(pm.iterationData.get(\"STS\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Current Status is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.complete).to.eql(Boolean(pm.iterationData.get(\"COM\")));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}